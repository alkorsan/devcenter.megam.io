---
title: "Setting up OpenVPN Clients"
layout: post
author: "saravanan"
og_image_url: "https://devcenter.megam.io/res/gotalk-intro.png"
description: "How to launch OpenVPN Client "
---


### Introduction

Want to access the Internet safely and securely from your smartphone or laptop when connected to an untrusted network. A Virtual Private Network (VPN) allows you to traverse untrusted networks privately and securely as if you were on a private network. The traffic emerges from the VPN server and continues its journey to the destination.
When combined with HTTPS connections, this setup allows you to secure your wireless logins and transactions.
OpenVPN is a full-featured open source Secure Socket Layer (SSL) VPN solution that accommodates a wide range of configurations. This tutorial will keep the installation and configuration steps as simple as possible.
[![img](https://s3-ap-southeast-1.amazonaws.com/megampub/images/vertice/DEPLOY-TO-MEGAM-VERTICE-BIG.png)](https://docs.megam.io/installation/prequisites/)

### Prerequisites

To follow this tutorial :

* you will need access to an Ubuntu 16.04 in your computer.

### Step 1: Configure the OpenVPN Service

* we can begin configuring the OpenVPN service using the credentials and files we've generated.

### Copy the Files to the OpenVPN Directory

* We need to copy the files we need to the /etc/openvpn configuration directory.

* We can start with all of the files that we just generated. These were placed within the ~/openvpn-ca/keys directory as they were created. We need to move our CA cert and key, our server cert and key, the HMAC signature, and the Diffie-Hellman file.

$ cd ~/openvpn-ca/keys
$ sudo cp ca.crt ca.key server.crt server.key ta.key dh2048.pem /etc/openvpn

* Next, we need to copy and unzip a sample OpenVPN configuration file into configuration directory so that we can use it as a basis for our setup.

 $ gunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz | sudo tee /etc/openvpn/server.conf

### Adjust the OpenVPN Configuration

Now our files are in place, we can modify the server configuration file.

$ sudo nano /etc/openvpn/server.conf

* Find the HMAC section by looking for the tls-auth directive. Remove the ";" to uncomment the tls-auth line. Below this, add the key-direction parameter set to "0":

tls-auth ta.key 0 # This file is secret
key-direction 0

* Find the section on cryptographic ciphers by looking for the commented out cipher lines. The AES-128-CBC cipher offers a good level of encryption and is well supported. Remove the ";" to uncomment the cipher AES-128-CBC line.

cipher AES-128-CBC

* Below this, add an auth line to select the HMAC message digest algorithm. For this, SHA256 is a better choice.

auth SHA256

* Find the user and group settings and remove the ";" at the beginning of to uncomment those lines.

user nobody
group nogroup

* When you are finished, save and close the file.

### Step 8: Adjust the Server Networking Configuration

* We need to adjust some aspects of the server's networking so that OpenVPN can correctly route traffic.

* Allow IP Forwarding

* First, we need to allow the server to forward traffic. This is fairly essential to the functionality we want our VPN server to provide.

* We can adjust this setting by modifying the /etc/sysctl.conf file.

 $ sudo nano /etc/sysctl.conf

 * Inside, look for the line that sets net.ipv4.ip_forward. Remove the "#" character from the beginning of the line to uncomment that setting.

net.ipv4.ip_forward=1

* Save and close the file when you are finished.

* To read the file and adjust the values for the current session, type.

$ sudo sysctl -p

Adjust the UFW Rules to Masquerade Client Connections

* You should have the UFW firewall in place. Regardless of whether you use the firewall to block unwanted traffic (which you almost always should do), we need the firewall in this guide to manipulate some of the traffic coming into the server. We need to modify the rules file to set up masquerading, an iptables concept that provides on-the-fly dynamic NAT to correctly route client connections.

* Before we open the firewall configuration file to add masquerading, we need to find the public network interface of our machine. To do this, type

$ ip route | grep default

* Public interface should follow the word "dev". For example, this result shows the interface named wlp11s0, which is highlighted below.

Output
default via 203.0.113.1 dev wlp11s0  proto static  metric 600

* you have the interface associated with your default route, open the /etc/ufw/before.rules file to add the relevant configuration.

sudo nano /etc/ufw/before.rules

* This file handles configuration that should be put into place before the conventional UFW rules are loaded. Towards the top of the file, add the highlighted lines below. This will set the default policy for the POSTROUTING chain in the nat table and masquerade any traffic coming from the VPN.

* Note: Remember to replace wlp11s0 in the -A POSTROUTING line below with the interface you found in the above command.

 #
 # rules.before
 #
 # Rules that should be run before the ufw command line added rules. Custom
 # rules should be added to one of these chains:
 #   ufw-before-input
 #   ufw-before-output
 #   ufw-before-forward
 #

 # START OPENVPN RULES
 # NAT table rules
   '' * nat
 :POSTROUTING ACCEPT [0:0]
 # Allow traffic from OpenVPN client to wlp11s0 (change to the interface you discovered!)
 -A POSTROUTING -s 10.8.0.0/8 -o wlp11s0 -j MASQUERADE
 COMMIT
 # END OPENVPN RULES

 # Don't delete these required lines, otherwise there will be errors


* Save and close the file when you are finished.

* We need to tell UFW to allow forwarded packets by default as well. To do this, we will open the /etc/default/ufw file.

$ sudo nano /etc/default/ufw

* Inside, find the DEFAULT_FORWARD_POLICY directive. We will change the value from DROP to ACCEPT.

DEFAULT_FORWARD_POLICY="ACCEPT"

* Save and close the file when you are finished.

* Open the OpenVPN Port and Enable the Changes

* Next, we'll adjust the firewall itself to allow traffic to OpenVPN.

* If you did not change the port and protocol in the /etc/openvpn/server.conf file, you will need to open up UDP traffic to port 1194. If you modified the port and/or protocol, substitute the values you selected here.

* We'll also add the SSH port in case you forgot to add it when following the prerequisite tutorial.

$ sudo ufw allow 1194/udp
$ sudo ufw allow OpenSSH

* Now, we can disable and re-enable UFW to load the changes from all of the files we've modified.

$ sudo ufw disable
$ sudo ufw enable

* Our server is now configured to correctly handle OpenVPN traffic.

### Step 9: Start and Enable the OpenVPN Service

* We're finally ready to start the OpenVPN service on our server.

* We need to start the OpenVPN server by specifying our configuration file name as an instance variable after the systemd unit file name. Our configuration file for our server is called /etc/openvpn/server.conf, so we will add @server to end of our unit file when calling it.

$ sudo systemctl start openvpn@server

* Double-check that the service has started successfully by typing

$ sudo systemctl status openvpn@server

* If everything went well, your output should look something that looks like this.

Output
● openvpn@server.service - OpenVPN connection to server
   Loaded: loaded (/lib/systemd/system/openvpn@.service; disabled; vendor preset: enabled)
   Active: active (running) since Tue 2016-05-03 15:30:05 EDT; 47s ago
     Docs: man:openvpn(8)
           https://community.openvpn.net/openvpn/wiki/Openvpn23ManPage
           https://community.openvpn.net/openvpn/wiki/HOWTO
  Process: 5852 ExecStart=/usr/sbin/openvpn --daemon ovpn-%i --status /run/openvpn/%i.status 10 --cd /etc/openvpn --script-security 2 --config /etc/openvpn/%i.conf --writepid /run/openvpn/%i.pid (code=exited, sta
 Main PID: 5856 (openvpn)
    Tasks: 1 (limit: 512)
   CGroup: /system.slice/system-openvpn.slice/openvpn@server.service
           └─5856 /usr/sbin/openvpn --daemon ovpn-server --status /run/openvpn/server.status 10 --cd /etc/openvpn --script-security 2 --config /etc/openvpn/server.conf --writepid /run/openvpn/server.pid

May 03 15:30:05 openvpn2 ovpn-server[5856]: /sbin/ip addr add dev tun0 local 10.8.0.1 peer 10.8.0.2
May 03 15:30:05 openvpn2 ovpn-server[5856]: /sbin/ip route add 10.8.0.0/24 via 10.8.0.2
May 03 15:30:05 openvpn2 ovpn-server[5856]: GID set to nogroup
May 03 15:30:05 openvpn2 ovpn-server[5856]: UID set to nobody
May 03 15:30:05 openvpn2 ovpn-server[5856]: UDPv4 link local (bound): [undef]
May 03 15:30:05 openvpn2 ovpn-server[5856]: UDPv4 link remote: [undef]
May 03 15:30:05 openvpn2 ovpn-server[5856]: MULTI: multi_init called, r=256 v=256
May 03 15:30:05 openvpn2 ovpn-server[5856]: IFCONFIG POOL: base=10.8.0.4 size=62, ipv6=0
May 03 15:30:05 openvpn2 ovpn-server[5856]: IFCONFIG POOL LIST
May 03 15:30:05 openvpn2 ovpn-server[5856]: Initialization Sequence Completed

* You can also check that the OpenVPN tun0 interface is available by typing.

$ ip addr show tun0

* You should see a configured interface.

Output
4: tun0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default qlen 100
    link/none
    inet 10.8.0.1 peer 10.8.0.2/32 scope global tun0
       valid_lft forever preferred_lft forever

* If everything went well, enable the service so  it can starts automatically at boot.

$ sudo systemctl enable openvpn@server

### Step 10: Create Client Configuration Infrastructure

* Next, we need to set up a system that will allow us to create client configuration files easily.
Creating the Client Config Directory Structure

* Create a directory structure within your home directory to store the files.

 $ mkdir -p ~/client-configs/files

 * Since our client configuration files will have the client keys embedded, we should lock down permissions on our inner directory.

 $ chmod 700 ~/client-configs/files

* Creating a Base Configuration

* Next copy an example client configuration into our directory to use as our base configuration.

 $ cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf ~/client-configs/base.conf

 * Open this new file in your text editor.

  $ nano ~/client-configs/base.conf

  * Inside, we need to make a few adjustments.

  * First, locate the remote directive. This points the client to our OpenVPN server address. This should be the public IP address of your OpenVPN server. If you changed the port that the OpenVPN server is listening on, change 1194 to the port you selected.

   . . .
 # The hostname/IP and port of the server.
 # You can have multiple remote entries
 # to load balance between the servers.
 remote server_IP_address 1194
 . . .


* Be sure that the protocol matches the value you are using in the server configuration.

 proto udp

* Next, uncomment the user and group directives by removing the ";".

 # Downgrade privileges after initialization (non-Windows only)
 user nobody
 group nogroup

* Find the directives that set the ca, cert, and key. Comment out these directives since we will be adding the certs and keys within the file itself.

 # SSL/TLS parms.
 # See the server config file for more
 # description.  It's best to use
 # a separate .crt/.key file pair
 # for each client.  A single ca
 # file can be used for all clients.
 #ca ca.crt
 #cert client.crt
 #key client.key

* Mirror the cipher and auth settings that we set in the /etc/openvpn/server.conf file.

 cipher AES-128-CBC
 auth SHA256

* Next, add the key-direction directive somewhere in the file. This must be set to "1" to work with the server.

 key-direction 1

 * Finally, add a few commented out lines. We want to include these with every config, but should only enable them for Linux clients that ship with a /etc/openvpn/update-resolv-conf file. This script uses the resolvconf utility to update DNS information for Linux clients.

 # script-security 2
 # up /etc/openvpn/update-resolv-conf
 # down /etc/openvpn/update-resolv-conf

 * If your client is running Linux and has an /etc/openvpn/update-resolv-conf file, you should uncomment these lines from the generated OpenVPN client configuration file.

 * Save the file when you are finished.

* Creating a Configuration Generation Script

* Next, we will create a simple script to compile our base configuration with the relevant certificate, key, and encryption files. This will place the generated configuration in the ~/client-configs/files directory.

* Create and open a file called make_config.sh within the ~/client-configs directory.

 $ nano ~/client-configs/make_config.sh

 * Inside, paste the following script.

 #!/bin/bash

# First argument: Client identifier

KEY_DIR=~/openvpn-ca/keys
OUTPUT_DIR=~/client-configs/files
BASE_CONFIG=~/client-configs/base.conf

 cat ${BASE_CONFIG} \
    <(echo -e '<ca>') \
    ${KEY_DIR}/ca.crt \
    <(echo -e '</ca>\n<cert>') \
    ${KEY_DIR}/${1}.crt \
    <(echo -e '</cert>\n<key>') \
    ${KEY_DIR}/${1}.key \
    <(echo -e '</key>\n<tls-auth>') \
    ${KEY_DIR}/ta.key \
    <(echo -e '</tls-auth>') \
    > ${OUTPUT_DIR}/${1}.ovpn

* Save and close the file when you are finished.

* Mark the file as executable by typing.

 $ chmod 700 ~/client-configs/make_config.sh

### Step 11: Generate Client Configurations

* Now, we can easily generate client configuration files.

* If you followed along with the guide, you created a client certificate and key called client1.crt and client1.key respectively by running the ./build-key client1 command in step 6. We can generate a config for these credentials by moving into our ~/client-configs directory and using the script we made.

 $ cd ~/client-configs
 $ ./make_config.sh client1

* If everything went well, we should have a client1.ovpn file in our ~/client-configs/files directory.

 $ ls ~/client-configs/files

 Output
 client1.ovpn

* Transferring Configuration to Client Devices

* We need to transfer the client configuration file to the relevant device. For instance, this could be your local computer or a mobile device.

* While the exact applications used to accomplish this transfer will depend on your choice and device's operating system, you want the application to use SFTP (SSH file transfer protocol) or SCP (Secure Copy) on the backend. This will transport your client's VPN authentication files over an encrypted connection.

* Here is an example SFTP command using our client1.ovpn example. This command can be run from your local computer (OS X or Linux). It places the .ovpn file in your home directory.

 local $ sftp user@openvpn_server_ip:client-configs/files/client1.ovpn ~/

 ### Step 12: Install the Client Configuration

* The OpenVPN connection will be called whatever you named the .ovpn file. In our example, this means that the connection will be called client1.ovpn for the first client file we generated.

* On Ubuntu or Debian, you can install it just as you did on the server by typing.

client$ sudo apt-get update
client$ sudo apt-get install openvpn

* On CentOS you can enable the EPEL repositories and then install it by typing.

 client$  sudo yum install epel-release
 client$  sudo yum install openvpn

* Configuring

* Check to see if your distribution includes a /etc/openvpn/update-resolv-conf script.

 client$ ls /etc/openvpn

  Output
  update-resolve-conf

* Next, edit the OpenVPN client configuration file you transfered.

client$ nano client1.ovpn

Uncomment the three lines we placed in to adjust the DNS settings if you were able to find an update-resolv-conf file

 script-security 2
 up /etc/openvpn/update-resolv-conf
 down /etc/openvpn/update-resolv-conf

* Save and close the file.

* Now, you can connect to the VPN by just pointing the openvpn command to the client configuration file:

 client$ sudo openvpn --config client1.ovpn

* This should connect you to your server.

### Step 13: Test Your VPN Connection

* Once everything is installed, a simple check confirms everything is working properly. Without having a VPN connection enabled, open a browser and go to DNSLeakTest.

* The site will return the IP address assigned by your internet service provider and as you appear to the rest of the world. To check your DNS settings through the same website, click on Extended Test and it will tell you which DNS servers you are using.

* Now connect the OpenVPN client to your Droplet's VPN and refresh the browser. The completely different IP address of your VPN server should now appear. That is now how you appear to the world. Again, DNSLeakTest's Extended Test will check your DNS settings and confirm you are now using the DNS resolvers pushed by your VPN.
